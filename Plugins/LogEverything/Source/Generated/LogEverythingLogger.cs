/*
 * Copyright (C) 2024 Tencent.
 * BQLOG is licensed under the Apache License, Version 2.0.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
using bq;
using bq.def;
using bq.impl;
using System.Runtime.InteropServices;

/*!
 * Generated Wrapper For LogEverythingLogger
 *
 * This is a category_log that supports attaching a category to each log entry.
 * Categories can be used to filter logs within the appender settings.
 *
 *    Usage: 
 *    bq.LogEverythingLogger my_category_log = bq.LogEverythingLogger::create_log(log_name, log_config);  //create a LogEverythingLogger object with config.
 *    my_category_log.info("content");  //this is for empty category
 *  my_category_log.info(my_category_log.cat.moduleA.classB, "content"); //this is a log entry for category ModuleA.ClassB, which was generated by your Category Config File
 */

public class LogEverythingLogger : category_log{
    private LogEverythingLogger() : base()
    {
    }
    
    private LogEverythingLogger(log child_inst) : base(child_inst)
    {
    }

    /// <summary>
    /// Create a LogEverythingLogger object
    /// </summary>
    /// <param name="name">
    ///     If the LogEverythingLogger name is an empty string, bqLog will automatically assign you a unique name. 
    ///     If the LogEverythingLogger name already exists, it will return the previously existing LogEverythingLogger object and overwrite the previous configuration with the new config.
    /// </param>
    /// <param name="config">
    ///     LogEverythingLogger config string
    /// </param>
    /// <returns>
    ///     A LogEverythingLogger object, if create failed, the is_valid() method of it will return false
    /// </returns>
    public static new LogEverythingLogger create_log(string name, string config)
    {
        if (string.IsNullOrEmpty(config))
        {
            return new LogEverythingLogger();
        }
        ulong log_id = 0;
        unsafe
        {
            //char*[] is not supported in some IL2CPP old versions, so we have to use such an ugly way to do this.
            //char*[] category_names_array = new char*[categories_count];
            System.IntPtr names_array_alloc_ptr = Marshal.AllocHGlobal((int)(sizeof(byte*) * categories_count));
            byte** category_names_array_byte_ptr = (byte**)names_array_alloc_ptr.ToPointer();
            for (int i = 0; i < categories_count; ++i)
            {
                category_names_array_byte_ptr[i] = utf8_encoder.alloc_utf8_fixed_str(category_names[i]);
            }

            byte* utf8_name_bytes = utf8_encoder.alloc_utf8_fixed_str(name);
            byte* utf8_config_bytes = utf8_encoder.alloc_utf8_fixed_str(config);

            log_id = log_invoker.__api_create_log(utf8_name_bytes, utf8_config_bytes, categories_count, category_names_array_byte_ptr);

            for (int i = 0; i < categories_count; ++i)
            {
                utf8_encoder.release_utf8_fixed_str(category_names_array_byte_ptr[i]);
            }
            utf8_encoder.release_utf8_fixed_str(utf8_name_bytes);
            utf8_encoder.release_utf8_fixed_str(utf8_config_bytes);
            Marshal.FreeHGlobal(names_array_alloc_ptr);
        }
        log result = get_log_by_id(log_id);
        return new LogEverythingLogger(result);
    }


    /// <summary>
    /// Get a LogEverythingLogger object by it's name
    /// </summary>
    /// <param name="log_name">Name of the LogEverythingLogger object you want to find</param>
    /// <returns>A LogEverythingLogger object, if the LogEverythingLogger object with specific name was not found, the is_valid() method of it will return false</returns>
    public static new LogEverythingLogger get_log_by_name(string log_name)
    {
        LogEverythingLogger result = new LogEverythingLogger(log.get_log_by_name(log_name));
        if(!result.is_valid())
        {
            return result;
        }
        //check categories
        if (result.get_categories_count() != LogEverythingLogger.categories_count)
        {
            return new LogEverythingLogger();
        }
        for (uint i = 0; i < result.get_categories_count(); ++i)
        {
            if (!LogEverythingLogger.category_names[(int)i].Equals(result.get_categories_name_array()[(int)i]))
            {
                return new LogEverythingLogger();
            }
        }
        return result;
    }


    ///Core log functions with category param, there are 6 log levels:
    ///verbose, debug, info, warning, error, fatal
    #region log methods for param count 0
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content)
    {
        return do_log(category, log_level.verbose, log_format_content);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content)
    {
        return do_log(category, log_level.debug, log_format_content);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content)
    {
        return do_log(category, log_level.info, log_format_content);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content)
    {
        return do_log(category, log_level.warning, log_format_content);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content)
    {
        return do_log(category, log_level.error, log_format_content);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content)
    {
        return do_log(category, log_level.fatal, log_format_content);
    }
    #endregion

    #region log methods for param count 1
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.info, log_format_content, ref p1);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.error, log_format_content, ref p1);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1);
    }
    #endregion

    #region log methods for param count 2
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2);
    }
    #endregion

    #region log methods for param count 3
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3);
    }
    #endregion

    #region log methods for param count 4
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4);
    }
    #endregion

    #region log methods for param count 5
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5);
    }
    #endregion

    #region log methods for param count 6
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6);
    }
    #endregion

    #region log methods for param count 7
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7);
    }
    #endregion

    #region log methods for param count 8
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8);
    }
    #endregion

    #region log methods for param count 9
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9);
    }
    #endregion

    #region log methods for param count 10
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10);
    }
    #endregion

    #region log methods for param count 11
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11);
    }
    #endregion

    #region log methods for param count 12
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.verbose, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.debug, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.info, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.warning, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.error, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, param_wrapper p1, param_wrapper p2, param_wrapper p3, param_wrapper p4, param_wrapper p5, param_wrapper p6, param_wrapper p7, param_wrapper p8, param_wrapper p9, param_wrapper p10, param_wrapper p11, param_wrapper p12)
    {
        return do_log(category, log_level.fatal, log_format_content, ref p1, ref p2, ref p3, ref p4, ref p5, ref p6, ref p7, ref p8, ref p9, ref p10, ref p11, ref p12);
    }
    #endregion

    #region log methods for more params. but call this method will cause GC(Heap) alloc
    public unsafe bool verbose(LogEverythingLogger_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.verbose, log_format_content, args);
    }
    public unsafe bool debug(LogEverythingLogger_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.debug, log_format_content, args);
    }
    public unsafe bool info(LogEverythingLogger_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.info, log_format_content, args);
    }
    public unsafe bool warning(LogEverythingLogger_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.warning, log_format_content, args);
    }
    public unsafe bool error(LogEverythingLogger_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.error, log_format_content, args);
    }
    public unsafe bool fatal(LogEverythingLogger_category_base category, string log_format_content, params param_wrapper[] args)
    {
        return do_log(category, log_level.fatal, log_format_content, args);
    }
    #endregion




    /****************************************************************************************************************/
    /**                                 Code Generated By Categories                                              ***/
    /****************************************************************************************************************/
    private static readonly string[] category_names = {
                                                          ""
                                                          , "Engine"
                                                          , "Game"
                                                          , "Game.Combat"
                                                          , "Game.Combat.Damage"
                                                          , "Game.Combat.Skill"
                                                          , "Game.Combat.Input"
                                                          , "Game.Animation"
                                                          , "Game.AI"
                                                          , "Game.AI.BehaviorTree"
                                                          , "Game.AI.Pathfinding"
                                                          , "Game.Input"
                                                          , "Game.Input.Ability"
                                                          , "Game.Input.Movement"
                                                          , "Game.Input.Interaction"
                                                          , "Editor"
                                                          , "Test"
                                                          , "Test.LogSystem"
                                                      };
    private static readonly uint categories_count = (uint)category_names.Length;
    public class LogEverythingLogger_category_base : log_category_base
    {
    }
    public class LogEverythingLogger_category_root
    {
        public class LogEverythingLogger_Engine : LogEverythingLogger_category_base
        {
            public LogEverythingLogger_Engine(){index = 1;}
        }
        public LogEverythingLogger_Engine Engine = new LogEverythingLogger_Engine();     //Engine
        public class LogEverythingLogger_Game : LogEverythingLogger_category_base
        {
            public LogEverythingLogger_Game(){index = 2;}
            public class LogEverythingLogger_Combat : LogEverythingLogger_category_base
            {
                public LogEverythingLogger_Combat(){index = 3;}
                public class LogEverythingLogger_Damage : LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Damage(){index = 4;}
                }
                public LogEverythingLogger_Damage Damage = new LogEverythingLogger_Damage();     //Game.Combat.Damage
                public class LogEverythingLogger_Skill : LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Skill(){index = 5;}
                }
                public LogEverythingLogger_Skill Skill = new LogEverythingLogger_Skill();     //Game.Combat.Skill
                public class LogEverythingLogger_Input : LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Input(){index = 6;}
                }
                public LogEverythingLogger_Input Input = new LogEverythingLogger_Input();     //Game.Combat.Input
            }
            public LogEverythingLogger_Combat Combat = new LogEverythingLogger_Combat();     //Game.Combat
            public class LogEverythingLogger_Animation : LogEverythingLogger_category_base
            {
                public LogEverythingLogger_Animation(){index = 7;}
            }
            public LogEverythingLogger_Animation Animation = new LogEverythingLogger_Animation();     //Game.Animation
            public class LogEverythingLogger_AI : LogEverythingLogger_category_base
            {
                public LogEverythingLogger_AI(){index = 8;}
                public class LogEverythingLogger_BehaviorTree : LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_BehaviorTree(){index = 9;}
                }
                public LogEverythingLogger_BehaviorTree BehaviorTree = new LogEverythingLogger_BehaviorTree();     //Game.AI.BehaviorTree
                public class LogEverythingLogger_Pathfinding : LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Pathfinding(){index = 10;}
                }
                public LogEverythingLogger_Pathfinding Pathfinding = new LogEverythingLogger_Pathfinding();     //Game.AI.Pathfinding
            }
            public LogEverythingLogger_AI AI = new LogEverythingLogger_AI();     //Game.AI
            public class LogEverythingLogger_Input : LogEverythingLogger_category_base
            {
                public LogEverythingLogger_Input(){index = 11;}
                public class LogEverythingLogger_Ability : LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Ability(){index = 12;}
                }
                public LogEverythingLogger_Ability Ability = new LogEverythingLogger_Ability();     //Game.Input.Ability
                public class LogEverythingLogger_Movement : LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Movement(){index = 13;}
                }
                public LogEverythingLogger_Movement Movement = new LogEverythingLogger_Movement();     //Game.Input.Movement
                public class LogEverythingLogger_Interaction : LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Interaction(){index = 14;}
                }
                public LogEverythingLogger_Interaction Interaction = new LogEverythingLogger_Interaction();     //Game.Input.Interaction
            }
            public LogEverythingLogger_Input Input = new LogEverythingLogger_Input();     //Game.Input
        }
        public LogEverythingLogger_Game Game = new LogEverythingLogger_Game();     //Game
        public class LogEverythingLogger_Editor : LogEverythingLogger_category_base
        {
            public LogEverythingLogger_Editor(){index = 15;}
        }
        public LogEverythingLogger_Editor Editor = new LogEverythingLogger_Editor();     //Editor
        public class LogEverythingLogger_Test : LogEverythingLogger_category_base
        {
            public LogEverythingLogger_Test(){index = 16;}
            public class LogEverythingLogger_LogSystem : LogEverythingLogger_category_base
            {
                public LogEverythingLogger_LogSystem(){index = 17;}
            }
            public LogEverythingLogger_LogSystem LogSystem = new LogEverythingLogger_LogSystem();     //Test.LogSystem
        }
        public LogEverythingLogger_Test Test = new LogEverythingLogger_Test();     //Test
    }


    
    public readonly LogEverythingLogger_category_root cat = new LogEverythingLogger_category_root();
}