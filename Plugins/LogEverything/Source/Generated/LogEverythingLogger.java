package bq;
/*
 * Copyright (C) 2024 Tencent.
 * BQLOG is licensed under the Apache License, Version 2.0.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */

import bq.def.*;
import bq.impl.log_invoker;

/*!
 * Generated Wrapper For LogEverythingLogger
 *
 * This is a category_log that supports attaching a category to each log entry.
 * Categories can be used to filter logs within the appender settings.
 *
 *    Usage: 
 *    bq.LogEverythingLogger my_category_log = bq.LogEverythingLogger::create_log(log_name, log_config);  //create a LogEverythingLogger object with config.
 *    my_category_log.info("content");  //this is for empty category
 *  my_category_log.info(my_category_log.cat.moduleA.classB, "content"); //this is a log entry for category ModuleA.ClassB, which was generated by your Category Config File
 */

public class LogEverythingLogger extends category_log{
    private LogEverythingLogger()
    {
        super();
    }
    
    private LogEverythingLogger(log child_inst)
    {
        super(child_inst);
    }
    
    /**
     * Create a LogEverythingLogger object
     * @param name 
     *             If the LogEverythingLogger name is an empty string, bqLog will automatically assign you a unique name. 
     *             If the LogEverythingLogger name already exists, it will return the previously existing LogEverythingLogger object and overwrite the previous configuration with the new config.
     * @param config
     *             LogEverythingLogger config string
     * @return
     *             A LogEverythingLogger object, if create failed, the is_valid() method of it will return false
     */
    public static LogEverythingLogger create_log(String name, String config)
    {
        if (config == null || config.length() == 0)
        {
            return new LogEverythingLogger();
        }
        long log_handle = log_invoker.__api_create_log(name, config, LogEverythingLogger.categories_count, LogEverythingLogger.category_names);
        log result = get_log_by_id(log_handle);
        return new LogEverythingLogger(result);
    }
    
    /**
     * Get a LogEverythingLogger object by it's name
     * @param log_name
     *             Name of the LogEverythingLogger you want to find
     * @return
     *             A LogEverythingLogger object, if the LogEverythingLogger object with specific name was not found, the is_valid() method of it will return false
     */
    public static LogEverythingLogger get_log_by_name(String log_name)
    {
        LogEverythingLogger result = new LogEverythingLogger(log.get_log_by_name(log_name));
        if(!result.is_valid())
        {
            return result;
        }
        //check categories
        if (result.get_categories_count() != LogEverythingLogger.categories_count)
        {
            return new LogEverythingLogger();
        }
        for (long i = 0; i < result.get_categories_count(); ++i)
        {
            if (!LogEverythingLogger.category_names[(int)i].equals(result.get_categories_name_array().get((int)i)))
            {
                return new LogEverythingLogger();
            }
        }
        return result;
    }
    

    ///Core log functions with category param, there are 6 log levels:
    ///verbose, debug, info, warning, error, fatal
    public boolean verbose(LogEverythingLogger_category_base category, String log_format_content, Object... args)
    {
        return do_log(category, log_level.verbose, log_format_content, args);
    }
    public boolean debug(LogEverythingLogger_category_base category, String log_format_content, Object... args)
    {
        return do_log(category, log_level.debug, log_format_content, args);
    }
    public boolean info(LogEverythingLogger_category_base category, String log_format_content, Object... args)
    {
        return do_log(category, log_level.info, log_format_content, args);
    }
    public boolean warning(LogEverythingLogger_category_base category, String log_format_content, Object... args)
    {
        return do_log(category, log_level.warning, log_format_content, args);
    }
    public boolean error(LogEverythingLogger_category_base category, String log_format_content, Object... args)
    {
        return do_log(category, log_level.error, log_format_content, args);
    }
    public boolean fatal(LogEverythingLogger_category_base category, String log_format_content, Object... args)
    {
        return do_log(category, log_level.fatal, log_format_content, args);
    }
    
    
    
    
    /****************************************************************************************************************/
    /**                                 Code Generated By Categories                                              ***/
    /****************************************************************************************************************/
    private static final String[] category_names = {
                                                       ""
                                                       , "Engine"
                                                       , "Game"
                                                       , "Game.Combat"
                                                       , "Game.Combat.Damage"
                                                       , "Game.Combat.Skill"
                                                       , "Game.Combat.Input"
                                                       , "Game.Animation"
                                                       , "Game.AI"
                                                       , "Game.AI.BehaviorTree"
                                                       , "Game.AI.Pathfinding"
                                                       , "Game.Input"
                                                       , "Game.Input.Ability"
                                                       , "Game.Input.Movement"
                                                       , "Game.Input.Interaction"
                                                       , "Editor"
                                                       , "Test"
                                                       , "Test.LogSystem"
                                                   };
    private static final long categories_count = (long)category_names.length;
    private static class LogEverythingLogger_category_base extends log_category_base
    {
    }
    public static class LogEverythingLogger_category_root
    {
        public static class LogEverythingLogger_Engine extends LogEverythingLogger_category_base
        {
            public LogEverythingLogger_Engine(){index = 1L;}
        }
        public LogEverythingLogger_Engine Engine = new LogEverythingLogger_Engine();     //Engine
        public static class LogEverythingLogger_Game extends LogEverythingLogger_category_base
        {
            public LogEverythingLogger_Game(){index = 2L;}
            public static class LogEverythingLogger_Combat extends LogEverythingLogger_category_base
            {
                public LogEverythingLogger_Combat(){index = 3L;}
                public static class LogEverythingLogger_Damage extends LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Damage(){index = 4L;}
                }
                public LogEverythingLogger_Damage Damage = new LogEverythingLogger_Damage();     //Game.Combat.Damage
                public static class LogEverythingLogger_Skill extends LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Skill(){index = 5L;}
                }
                public LogEverythingLogger_Skill Skill = new LogEverythingLogger_Skill();     //Game.Combat.Skill
                public static class LogEverythingLogger_Input extends LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Input(){index = 6L;}
                }
                public LogEverythingLogger_Input Input = new LogEverythingLogger_Input();     //Game.Combat.Input
            }
            public LogEverythingLogger_Combat Combat = new LogEverythingLogger_Combat();     //Game.Combat
            public static class LogEverythingLogger_Animation extends LogEverythingLogger_category_base
            {
                public LogEverythingLogger_Animation(){index = 7L;}
            }
            public LogEverythingLogger_Animation Animation = new LogEverythingLogger_Animation();     //Game.Animation
            public static class LogEverythingLogger_AI extends LogEverythingLogger_category_base
            {
                public LogEverythingLogger_AI(){index = 8L;}
                public static class LogEverythingLogger_BehaviorTree extends LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_BehaviorTree(){index = 9L;}
                }
                public LogEverythingLogger_BehaviorTree BehaviorTree = new LogEverythingLogger_BehaviorTree();     //Game.AI.BehaviorTree
                public static class LogEverythingLogger_Pathfinding extends LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Pathfinding(){index = 10L;}
                }
                public LogEverythingLogger_Pathfinding Pathfinding = new LogEverythingLogger_Pathfinding();     //Game.AI.Pathfinding
            }
            public LogEverythingLogger_AI AI = new LogEverythingLogger_AI();     //Game.AI
            public static class LogEverythingLogger_Input extends LogEverythingLogger_category_base
            {
                public LogEverythingLogger_Input(){index = 11L;}
                public static class LogEverythingLogger_Ability extends LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Ability(){index = 12L;}
                }
                public LogEverythingLogger_Ability Ability = new LogEverythingLogger_Ability();     //Game.Input.Ability
                public static class LogEverythingLogger_Movement extends LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Movement(){index = 13L;}
                }
                public LogEverythingLogger_Movement Movement = new LogEverythingLogger_Movement();     //Game.Input.Movement
                public static class LogEverythingLogger_Interaction extends LogEverythingLogger_category_base
                {
                    public LogEverythingLogger_Interaction(){index = 14L;}
                }
                public LogEverythingLogger_Interaction Interaction = new LogEverythingLogger_Interaction();     //Game.Input.Interaction
            }
            public LogEverythingLogger_Input Input = new LogEverythingLogger_Input();     //Game.Input
        }
        public LogEverythingLogger_Game Game = new LogEverythingLogger_Game();     //Game
        public static class LogEverythingLogger_Editor extends LogEverythingLogger_category_base
        {
            public LogEverythingLogger_Editor(){index = 15L;}
        }
        public LogEverythingLogger_Editor Editor = new LogEverythingLogger_Editor();     //Editor
        public static class LogEverythingLogger_Test extends LogEverythingLogger_category_base
        {
            public LogEverythingLogger_Test(){index = 16L;}
            public static class LogEverythingLogger_LogSystem extends LogEverythingLogger_category_base
            {
                public LogEverythingLogger_LogSystem(){index = 17L;}
            }
            public LogEverythingLogger_LogSystem LogSystem = new LogEverythingLogger_LogSystem();     //Test.LogSystem
        }
        public LogEverythingLogger_Test Test = new LogEverythingLogger_Test();     //Test
    }

    
    public final LogEverythingLogger_category_root cat = new LogEverythingLogger_category_root();
}
